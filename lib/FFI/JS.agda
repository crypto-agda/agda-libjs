module FFI.JS where

open import Data.Empty       public renaming (‚ä• to ùüò)
open import Data.Unit.Base   public renaming (‚ä§ to ùüô)
open import Data.Char.Base   public using (Char)
open import Data.String.Base public using (String)
open import Data.Bool.Base   public using (Bool; true; false)
open import Data.List.Base   using (List; []; _‚à∑_)
open import Data.Product     using (_√ó_) renaming (proj‚ÇÅ to fst; proj‚ÇÇ to snd)
open import Function         using (id; _‚àò_)

open import Control.Process.Type

{-# COMPILED_JS Bool function (x,v) { return ((x)? v["true"]() : v["false"]()); } #-}
{-# COMPILED_JS true  true #-}
{-# COMPILED_JS false false #-}

postulate
  Number   : Set
  JSArray  : Set ‚Üí Set
  JSObject : Set
  JSValue  : Set

postulate readNumber : String ‚Üí Number
{-# COMPILED_JS readNumber Number #-}

postulate 0N : Number
{-# COMPILED_JS 0N 0 #-}

postulate 1N : Number
{-# COMPILED_JS 1N 1 #-}

postulate 2N : Number
{-# COMPILED_JS 2N 2 #-}

postulate 4N : Number
{-# COMPILED_JS 4N 4 #-}

postulate 8N : Number
{-# COMPILED_JS 8N 8 #-}

postulate 16N : Number
{-# COMPILED_JS 16N 16 #-}

postulate 32N : Number
{-# COMPILED_JS 32N 32 #-}

postulate 64N : Number
{-# COMPILED_JS 64N 64 #-}

postulate 128N : Number
{-# COMPILED_JS 128N 128 #-}

postulate 256N : Number
{-# COMPILED_JS 256N 256 #-}

postulate 512N : Number
{-# COMPILED_JS 512N 512 #-}

postulate 1024N : Number
{-# COMPILED_JS 1024N 1024 #-}

postulate 2048N : Number
{-# COMPILED_JS 2048N 2048 #-}

postulate 4096N : Number
{-# COMPILED_JS 4096N 4096 #-}

postulate _+_ : Number ‚Üí Number ‚Üí Number
{-# COMPILED_JS _+_ function(x) { return function(y) { return x + y; }; } #-}

postulate _‚àí_ : Number ‚Üí Number ‚Üí Number
{-# COMPILED_JS _‚àí_ function(x) { return function(y) { return x - y; }; } #-}

postulate _*_ : Number ‚Üí Number ‚Üí Number
{-# COMPILED_JS _*_ function(x) { return function(y) { return x * y; }; } #-}

postulate _/_ : Number ‚Üí Number ‚Üí Number
{-# COMPILED_JS _/_ function(x) { return function(y) { return x / y; }; } #-}

infixr 5  _++_
postulate _++_ : String ‚Üí String ‚Üí String
{-# COMPILED_JS _++_ function(x) { return function(y) { return x + y; }; } #-}

postulate _+JS_ : JSValue ‚Üí JSValue ‚Üí JSValue
{-# COMPILED_JS _+JS_ function(x) { return function(y) { return x + y; }; } #-}

postulate _‚â§JS_ : JSValue ‚Üí JSValue ‚Üí Bool
{-# COMPILED_JS _‚â§JS_ function(x) { return function(y) { return x <= y; }; } #-}

postulate _<JS_ : JSValue ‚Üí JSValue ‚Üí Bool
{-# COMPILED_JS _<JS_ function(x) { return function(y) { return x < y; }; } #-}

postulate _>JS_ : JSValue ‚Üí JSValue ‚Üí Bool
{-# COMPILED_JS _>JS_ function(x) { return function(y) { return x > y; }; } #-}

postulate _‚â•JS_ : JSValue ‚Üí JSValue ‚Üí Bool
{-# COMPILED_JS _‚â•JS_ function(x) { return function(y) { return x >= y; }; } #-}

postulate _===_ : JSValue ‚Üí JSValue ‚Üí Bool
{-# COMPILED_JS _===_ function(x) { return function(y) { return x === y; }; } #-}

postulate reverse : {A : Set} ‚Üí JSArray A ‚Üí JSArray A
{-# COMPILED_JS reverse function(ty) { return function(x) { return x.reverse(); }; } #-}

postulate sort : {A : Set} ‚Üí JSArray A ‚Üí JSArray A
{-# COMPILED_JS sort function(ty) { return function(x) { return x.sort(); }; } #-}

postulate split : (sep target : String) ‚Üí JSArray String
{-# COMPILED_JS split function(sep) { return function(target) { return target.split(sep); }; } #-}

postulate join : (sep : String)(target : JSArray String) ‚Üí String
{-# COMPILED_JS join function(sep) { return function(target) { return target.join(sep); }; } #-}

postulate fromList : {A B : Set}(xs : List A)(fromElt : A ‚Üí B) ‚Üí JSArray B
{-# COMPILED_JS fromList require("libagda").fromList #-}

postulate length : String ‚Üí Number
{-# COMPILED_JS length function(s) { return s.length; } #-}

postulate JSON-stringify : JSValue ‚Üí String
{-# COMPILED_JS JSON-stringify JSON.stringify #-}

postulate JSON-parse : String ‚Üí JSValue
{-# COMPILED_JS JSON-parse JSON.parse #-}

postulate toString : JSValue ‚Üí String
{-# COMPILED_JS toString function(x) { return x.toString(); } #-}

postulate fromBool : Bool ‚Üí JSValue
{-# COMPILED_JS fromBool function(x) { return x; } #-}

postulate fromString : String ‚Üí JSValue
{-# COMPILED_JS fromString function(x) { return x; } #-}

postulate fromChar : Char ‚Üí JSValue
{-# COMPILED_JS fromChar String #-}

postulate Char‚ñπString : Char ‚Üí String
{-# COMPILED_JS Char‚ñπString String #-}

postulate fromNumber : Number ‚Üí JSValue
{-# COMPILED_JS fromNumber function(x) { return x; } #-}

postulate fromJSArray : {A : Set} ‚Üí JSArray A ‚Üí JSValue
{-# COMPILED_JS fromJSArray function(ty) { return function(x) { return x; }; } #-}

postulate fromJSObject : JSObject ‚Üí JSValue
{-# COMPILED_JS fromJSObject function(x) { return x; } #-}

postulate objectFromList : {A : Set}(xs : List A)(fromKey : A ‚Üí String)(fromVal : A ‚Üí JSValue) ‚Üí JSObject
{-# COMPILED_JS objectFromList require("libagda").objectFromList #-}

postulate decodeJSArray : {A B : Set}(arr : JSArray A)(fromElt : Number ‚Üí A ‚Üí B) ‚Üí List B
{-# COMPILED_JS decodeJSArray require("libagda").decodeJSArray #-}

postulate castNumber : JSValue ‚Üí Number
{-# COMPILED_JS castNumber Number #-}

postulate castString : JSValue ‚Üí String
{-# COMPILED_JS castString String #-}

-- TODO dyn check of length 1?
postulate castChar : JSValue ‚Üí Char
{-# COMPILED_JS castChar String #-}

-- TODO dyn check of length 1?
postulate String‚ñπChar : String ‚Üí Char
{-# COMPILED_JS String‚ñπChar String #-}

-- TODO dyn check?
postulate castJSArray : JSValue ‚Üí JSArray JSValue
{-# COMPILED_JS castJSArray function(x) { return x; } #-}

-- TODO dyn check?
postulate castJSObject : JSValue ‚Üí JSObject
{-# COMPILED_JS castJSObject function(x) { return x; } #-}

postulate nullJS : JSValue
{-# COMPILED_JS nullJS null #-}

postulate _¬∑[_] : JSValue ‚Üí JSValue ‚Üí JSValue
{-# COMPILED_JS _¬∑[_] require("libagda").readProp #-}

postulate _Array[_] : {A : Set} ‚Üí JSArray A ‚Üí Number ‚Üí A
{-# COMPILED_JS _Array[_] function(ty) { return require("libagda").readProp; } #-}

postulate onJSArray : {A : Set} (f : JSArray JSValue ‚Üí A) ‚Üí JSValue ‚Üí A
{-# COMPILED_JS onJSArray require("libagda").onJSArray #-}

postulate onString : {A : Set} (f : String ‚Üí A) ‚Üí JSValue ‚Üí A
{-# COMPILED_JS onString require("libagda").onString #-}

-- Writes 'msg' and 'inp' to the console and then returns `f inp`
postulate trace : {A B : Set}(msg : String)(inp : A)(f : A ‚Üí B) ‚Üí B
{-# COMPILED_JS trace require("libagda").trace #-}

postulate throw : {A : Set} ‚Üí String ‚Üí A ‚Üí A
{-# COMPILED_JS throw require("libagda").throw #-}

data Value : Set‚ÇÄ where
  array  : List Value ‚Üí Value
  object : List (String √ó Value) ‚Üí Value
  string : String ‚Üí Value
  number : Number ‚Üí Value
  bool   : Bool   ‚Üí Value
  null   : Value

Object = List (String √ó JSValue)

postulate fromValue : Value ‚Üí JSValue
{-# COMPILED_JS fromValue require("libagda").fromValue #-}

-- TODO we could make it a COMPILED type and remove the encoding by using JSValue as the internal repr.
data ValueView : Set‚ÇÄ where
  array  : JSArray JSValue ‚Üí ValueView
  object : JSObject        ‚Üí ValueView
  string : String          ‚Üí ValueView
  number : Number          ‚Üí ValueView
  bool   : Bool            ‚Üí ValueView
  null   : ValueView

-- TODO not yet tested
postulate viewJSValue : JSValue ‚Üí ValueView
{-# COMPILED_JS viewJSValue require("libagda").viewJSValue #-}

Bool‚ñπString : Bool ‚Üí String
Bool‚ñπString true  = "true"
Bool‚ñπString false = "false"

List‚ñπString : List Char ‚Üí String
List‚ñπString xs = join "" (fromList xs Char‚ñπString)

String‚ñπList : String ‚Üí List Char
String‚ñπList s = decodeJSArray (split "" s) (Œª _ ‚Üí String‚ñπChar)

Number‚ñπString : Number ‚Üí String
Number‚ñπString = castString ‚àò fromNumber

JSArray‚ñπListString : {A : Set} ‚Üí JSArray A ‚Üí List A
JSArray‚ñπListString a = decodeJSArray a (Œª _ ‚Üí id)

fromObject : Object ‚Üí JSObject
fromObject o = objectFromList o fst snd

_‚â§Char_ : Char ‚Üí Char ‚Üí Bool
x ‚â§Char y = fromChar x ‚â§JS fromChar y

_<Char_ : Char ‚Üí Char ‚Üí Bool
x <Char y = fromChar x <JS fromChar y

_>Char_ : Char ‚Üí Char ‚Üí Bool
x >Char y = fromChar x >JS fromChar y

_‚â•Char_ : Char ‚Üí Char ‚Üí Bool
x ‚â•Char y = fromChar x ‚â•JS fromChar y

_‚â§String_ : String ‚Üí String ‚Üí Bool
x ‚â§String y = fromString x ‚â§JS fromString y

_<String_ : String ‚Üí String ‚Üí Bool
x <String y = fromString x <JS fromString y

_>String_ : String ‚Üí String ‚Üí Bool
x >String y = fromString x >JS fromString y

_‚â•String_ : String ‚Üí String ‚Üí Bool
x ‚â•String y = fromString x ‚â•JS fromString y

_‚â§Number_ : Number ‚Üí Number ‚Üí Bool
x ‚â§Number y = fromNumber x ‚â§JS fromNumber y

_<Number_ : Number ‚Üí Number ‚Üí Bool
x <Number y = fromNumber x <JS fromNumber y

_>Number_ : Number ‚Üí Number ‚Üí Bool
x >Number y = fromNumber x >JS fromNumber y

_‚â•Number_ : Number ‚Üí Number ‚Üí Bool
x ‚â•Number y = fromNumber x ‚â•JS fromNumber y

_¬∑¬´_¬ª : JSValue ‚Üí String ‚Üí JSValue
v ¬∑¬´ s ¬ª = v ¬∑[ fromString s ]

_¬∑¬´_¬ªA : JSValue ‚Üí String ‚Üí JSArray JSValue
v ¬∑¬´ s ¬ªA = castJSArray (v ¬∑¬´ s ¬ª)

trace-call : {A B : Set} ‚Üí String ‚Üí (A ‚Üí B) ‚Üí A ‚Üí B
trace-call s f x = trace s (f x) id

postulate JSCmd : Set ‚Üí Set

Callback1 : Set ‚Üí Set
Callback1 A = JSCmd ((A ‚Üí ùüò) ‚Üí ùüò)

Callback0 : Set
Callback0 = Callback1 ùüô

Callback2 : Set ‚Üí Set ‚Üí Set
Callback2 A B = JSCmd ((A ‚Üí B ‚Üí ùüò) ‚Üí ùüò)

postulate assert : Bool ‚Üí Callback0
{-# COMPILED_JS assert require("libagda").assert #-}

check : {A : Set}(pred : Bool)(errmsg : ùüô ‚Üí String)(input : A) ‚Üí A
check true  errmsg x = x
check false errmsg x = throw (errmsg _) x

warn-check : {A : Set}(pred : Bool)(errmsg : ùüô ‚Üí String)(input : A) ‚Üí A
warn-check true  errmsg x = x
warn-check false errmsg x = trace ("Warning: " ++ errmsg _) x id

infixr 0  _>>_ _!‚ÇÅ_ _!‚ÇÇ_
data JS! : Set‚ÇÅ where
  end  : JS!
  _!‚ÇÅ_ : {A : Set}(cmd : Callback1 A)(cb : A ‚Üí JS!) ‚Üí JS!
  _!‚ÇÇ_ : {A B : Set}(cmd : JSCmd ((A ‚Üí B ‚Üí ùüò) ‚Üí ùüò))(cb : A ‚Üí B ‚Üí JS!) ‚Üí JS!

_>>_ : Callback0 ‚Üí JS! ‚Üí JS!
cmd >> cont = cmd !‚ÇÅ Œª _ ‚Üí cont
-- -}
-- -}
-- -}
-- -}
-- -}
